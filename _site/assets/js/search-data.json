{"0": {
    "doc": "📆 Calendar",
    "title": "📆 Calendar",
    "content": "Lectures and discussions are both held in Pepper Canyon Hall 120. Fiday discussions are held in Pepper Canyon Hall 120. Some office hours are held in person, others on zoom. Consult the calendar for specifics. ",
    "url": "/calendar/",
    "relUrl": "/calendar/"
  },"1": {
    "doc": "🏠 Home",
    "title": "Practice and Application of Data Science",
    "content": "DSC 80, Summer Session 2 2024 at UC San Diego . Brendan Tomoschuk he/him . brtomoschuk@ucsd.edu Lecture(s): TuTh 5:00-7:50PM (A00), 11:00AM-12:20PM (B00) in Pepper Canyon Hall 120 . Podcasts Welcome Survey . Week 1 - From BabyPandas to Pandas, Dataframes . Tue Aug 6 LEC 1 . Introduction, Data Science Lifecycle . Ch. 1 . LEC 2 . DataFrame Fundamentals . Ch. 6, 6.1 . Wed Aug 7 DISC 1 . Environment Setup, Exam Prep . Thu Aug 8 LEC 3 . Aggregating . Ch. 6.2 . LEC 4 . Simpson's Paradox, Joining, Transforming . Ch. 6.3-6.5 . Fri Aug 9 LAB 1 . Python, NumPy, and Pandas . Week 2 – Messy Data, Statistical Testing, Missing Values . Mon Aug 12 LAB 2 . More Pandas . Tue Aug 13 LEC 5 . Exploring and Cleaning Data . Ch. 9 and 10 . LEC 6 . Hypothesis and Permutation Testing . DSC 10 Review Notebook, Ch. 17 . Wed Aug 14 PROJ 1 . Project 1 . DISC 2 . Exam Prep . Thu Aug 15 LEC 7 . Missingness Mechanisms . Fast Permutation Tests, A1, A2 . LEC 8 . Imputation . DSP 6.3-6.5 . Fri Aug 16 LAB 3 . DataFrame Manipulation . Week 3 – HTTP, Web data . Mon Aug 19 LAB 4 . Hypothesis and Permutation Testing . Ch. 17 . Tue Aug 20 LEC 9 . HTTP Basics . Ch. 14.2-14.4 . EXAM . Midterm Exam (in class) . Info Sheet for Midterm . Wed Aug 21 PROJ 2 . Project 2 . DISC 3 . Exam Prep . Thu Aug 22 LEC 10 . Web Scraping . Ch. 14.2-14.4 . LEC 11 . Regular Expressions . Ch. 13 . Fri Aug 23 LAB 5 . Missing Values and Imputation . Week 4 – Text data, Modeling, Feature Engineering . Mon Aug 26 LAB 6 . HTTP and HTML . Tue Aug 27 LEC 12 . Text Features . Ch. 13.4 . LEC 13 . Linear Regression . Ch. 15.0-15.6 . Wed Aug 28 PROJ 3 . Project 3 . DISC 4 . Exam Prep . Thu Aug 29 LEC 14 . Feature Engineering . Ch. 15.7-15.9 . LEC 15 . Pipelines, Multicollinearity, and Generalization . Ch. 16, 17.6 . Fri Aug 30 LAB 7 . Regular Expressions and Text Data . Week 5 – Modeling in Practice, Evaluating classifiers . Mon Sep 2 LAB 8 . Modeling and Feature Engineering . Tue Sep 3 LEC 16 . Hyperparameters, Cross-Validation, and Decision Trees . Ch. 16 . LEC 17 . Grid Search, Random Forests, Classifier Evaluation . Wed Sep 4 DISC 5 . Exam Prep . Slides . Thu Sep 5 LEC 18 . Classifier Evaluation and Model Fairness . Ch. 19.5 . LEC 19 . Career Advice, Review, Conclusion . Fri Sep 6 LAB 9 . Pipelines . Sat Sep 7 EXAM . Final Exam . FINAL PROJ . Final Project . ",
    "url": "/#practice-and-application-of-data-science",
    "relUrl": "/#practice-and-application-of-data-science"
  },"2": {
    "doc": "🏠 Home",
    "title": "🏠 Home",
    "content": " ",
    "url": "/",
    "relUrl": "/"
  },"3": {
    "doc": "📚 Resources",
    "title": "📚 Resources",
    "content": " ",
    "url": "/resources/",
    "relUrl": "/resources/"
  },"4": {
    "doc": "📚 Resources",
    "title": "Table of contents",
    "content": ". | Past Exams | Videos | Readings . | Textbooks | Lecture-Specific Readings | Articles | Other Links | . | Regular Expressions | . ",
    "url": "/resources/#table-of-contents",
    "relUrl": "/resources/#table-of-contents"
  },"5": {
    "doc": "📚 Resources",
    "title": "Past Exams",
    "content": "Past exams with detailed solutions can be found at practice.dsc80.com. We’re constantly working to add more exams and solutions to the site. ",
    "url": "/resources/#past-exams",
    "relUrl": "/resources/#past-exams"
  },"6": {
    "doc": "📚 Resources",
    "title": "Videos",
    "content": ". | DSC 80 Environment Setup and Assignment Workflow. | Working with the command-line in DSC 80. | . ",
    "url": "/resources/#videos",
    "relUrl": "/resources/#videos"
  },"7": {
    "doc": "📚 Resources",
    "title": "Readings",
    "content": "Textbooks . | Principles and Techniques of Data Science, the textbook for Berkeley’s Data 100 course. Most of our supplemental readings will come from here. | notes.dsc80.com. These notes were originally written for DSC 80 but have not been updated in a few years. Some of our supplemental readings will come from here. | Wes McKinney. “Python for Data Analysis”. | DSC 10 Course Notes – great refresher on babypandas. | Computational and Inferential Thinking, the textbook for Berkeley’s Data 8 course. | . Lecture-Specific Readings . | Fast Permutation Tests. | More Missingness Examples. | . Articles . | Views and Copies in pandas – a great read if you’d like to learn more about the infamous SettingWithCopyWarning. | jwilber.me/permutationtest, a great visual explanation of permutation testing. | A Visual Introduction to Machine Learning and Model Tuning and the Bias-Variance Tradeoff, excellent visual descriptions of the last few weeks of the course (some terminology is different, but the ideas are the same). | New: MLU Explain, a collection of interactive articles (prepared by Jared Wilber) that explain core machine learning ideas, like cross-validation, random forests, and precision and recall. | . Other Links . | pandastutor.com, the equivalent of pythontutor.com for DataFrame manipulation. | . ",
    "url": "/resources/#readings",
    "relUrl": "/resources/#readings"
  },"8": {
    "doc": "📚 Resources",
    "title": "Regular Expressions",
    "content": ". | regex101.com, a helpful site to have open while writing regular expressions. | Python re library documentation and how-to. | regex “cheat sheet” (taken from here). | . ",
    "url": "/resources/#regular-expressions",
    "relUrl": "/resources/#regular-expressions"
  },"9": {
    "doc": "👩‍🏫 Staff",
    "title": "👩‍🏫 Staff",
    "content": " ",
    "url": "/staff/",
    "relUrl": "/staff/"
  },"10": {
    "doc": "👩‍🏫 Staff",
    "title": "Instructor",
    "content": "Brendan Tomoschuk . brtomoschuk@ucsd.edu . Brendan Tomoschuk is a senior data scientist at Cruise and a lecturer in the Halıcıoğlu Data Science Institute at UC San Diego. He works on models and metrics for self-driving cars and teaches data science and statistics in his spare time. He completed his PhD at UC San Diego in Cognitive Psychology where his research focused on models and experimentation around bilingualism and second language learning. ",
    "url": "/staff/#instructor",
    "relUrl": "/staff/#instructor"
  },"11": {
    "doc": "👩‍🏫 Staff",
    "title": "Staff",
    "content": "Tutor Ashley Ho she/her . a1ho@ucsd.edu . 🎓 incoming M.S., Data Science . 🏠 Irvine, CA . 🙋 Cooking, movies/TV shows, corgis . 🥪 Mendocino Farms, formoosa, Ramen Nagi . Tutor Jason Huynh he/him . jah037@ucsd.edu . 🎓 3rd year, Data Science, Sixth . 🏠 Modesto, CA . 🙋 Gym, Life, Music . 🍝 Catania, Tacos El Gordo, Pho Cow Cali Express . Tutor Mizuho Fukuda she/her . mfukuda@ucsd.edu . 🎓 incoming MS, Data Science . 🏠 Tokyo, Japan . 🙋 courses, knitting and crocheting:) . 🥘 Costa Brava, Ironside Fish &amp; Oyster, Cesarina . Tutor Nicole Reardon she/her . nreardon@ucsd.edu . 🎓 4th year, Data Science, Muir . 🏠 Riverside, CA . 🙋 selecting courses and getting involved on campus . 🍗 Raising Cane's 🗣️ . Tutor Qirui Zheng she/hers . q7zheng@ucsd.edu . 🎓 3rd year, Data Science, Seventh . 🏠 San Francisco, CA . 🙋 NLP, game theory, astronomy . 🍮 Lanzhou noodlelicious . Tutor Ylesia Wu she/her . xw001@ucsd.edu . 🎓 3rd year, Data Science, ERC . 🏠 Beijing, China . 🙋 electric unicycle, Chinese music . 🥮 OMOMO Tea Shoppe, BenGong’s Tea, The Noble Chef, Mo-Mo-Paradise . ",
    "url": "/staff/#staff",
    "relUrl": "/staff/#staff"
  },"12": {
    "doc": "📖 Syllabus",
    "title": "📖 Syllabus",
    "content": " ",
    "url": "/syllabus/",
    "relUrl": "/syllabus/"
  },"13": {
    "doc": "📖 Syllabus",
    "title": "Table of contents",
    "content": ". | About 🧐 | Getting Started 💻 . | Websites | Development Environment | Forms | . | Communication 💬 | Course Components 🍎 . | Lectures | Discussions and Exam Prep | Labs | Projects | Office Hours | . | Exams 📝 . | Redemption Policy | . | Policies 💯 . | Grading | Late Policy | Redemption Policy for Labs and Projects | Regrade Requests | Incompletes | A note on letter grades | . | Collaboration Policy and Academic Integrity 🤝 . | Why is academic integrity important? | What counts as cheating? | Use of Generative Artificial Intelligence | . | Support 🫂 . | Accommodations | Diversity and Inclusion | Campus Resources | . | Acknowledgements 🙏 | . ",
    "url": "/syllabus/#table-of-contents",
    "relUrl": "/syllabus/#table-of-contents"
  },"14": {
    "doc": "📖 Syllabus",
    "title": "About 🧐",
    "content": "DSC 80 serves as a bridge between lower-division and upper-division data science courses. In DSC 80, students will gain proficiency with the data science life cycle and learn many of the fundamental principles and techniques of data science spanning algorithms, statistics, machine learning, visualization, and data systems. After DSC 80, students will be prepared for data science internships and interviews, will have the tools to create their own data science portfolios, and will have the maturity necessary to succeed in upper-division machine learning and statistics courses. Prerequisites: DSC 30 and DSC 40A. ",
    "url": "/syllabus/#about-",
    "relUrl": "/syllabus/#about-"
  },"15": {
    "doc": "📖 Syllabus",
    "title": "Getting Started 💻",
    "content": "The course website, dsc80.com, will contain links to all course content. There are also a few things you’ll need to do to get set up. Websites . You’ll need to make accounts on the following sites: . | Ed: We’ll be using Ed as our course message and discussion board. More details are in the Communication section below. If you didn’t already get an invitation to our Ed course, sign up here. | Gradescope: You’ll submit all assignments and exams to Gradescope. This is where all of your grades will live as well. Most of the assignments will be coding assignments. Parts of these assignments will be manually graded, but most of them will be autograded. You should have received an email invitation for Gradescope, but if not please let us know as soon as possible (preferably via Ed). | GitHub: Like in DSC 30, you’ll access all course content (lecture slides and assignments) by pulling our course GitHub repository. The link to the repo is here. In most assignments, you won’t need to push anything to GitHub. However, you will need to push to GitHub as part of your Final Project, so you’ll need to have an account by then. | . Note that we will not be using Canvas for anything this quarter. Development Environment . As soon as you are able to, go follow the steps in the Tech Support page of the course website to set up your development environment for the course. Forms . Please fill out the Welcome Survey to tell us a bit more about yourself and tell us if you need an alternate exam. ",
    "url": "/syllabus/#getting-started-",
    "relUrl": "/syllabus/#getting-started-"
  },"16": {
    "doc": "📖 Syllabus",
    "title": "Communication 💬",
    "content": "This quarter, we’ll be using Ed as our course message board. You will be added to Ed automatically; use the invite link in the section above if you weren’t added. If you have a question about anything to do with the course — if you’re stuck on a problem, didn’t understand something from lecture, want clarification on course logistics, or just have a general question about data science — you can make a post on Ed. We only ask that if your question includes some or all of an answer (even if you’re not sure it’s right), please make your post private so that others cannot see it. You can also post anonymously to other students if you prefer. Course staff will regularly check Ed and try to answer any questions that you have. You’re also encouraged to answer questions asked by other students. Explaining something is a great way to solidify your understanding of it! . Please don’t email individual staff members, just make a private or public Ed post instead. ",
    "url": "/syllabus/#communication-",
    "relUrl": "/syllabus/#communication-"
  },"17": {
    "doc": "📖 Syllabus",
    "title": "Course Components 🍎",
    "content": "Lectures . Lectures will be held in-person on Tuesdays and Thursdays from 5:00-7:50PM in Pepper Canyon Hall 120. Lectures will be podcasted. New In the Welcome Survey at the start of the quarter, you will have the option of opting into lecture attendance or opting out. If you choose to opt in, lecture attendance will be worth 5% of your overall grade. If you choose to opt out, attendance will be worth 0%, and your midterm and final exam grade will each be worth 2.5% more. To receive lecture attendance for a given week, you must attend and participate in the in-lecture activities for both lectures that week. You will receive full credit for lecture attendance for the quarter if you attend at least 4 weeks of lecture during the 5 week quarter. Lecture notebooks will be your main resource in this class. You can access them, along with all course materials, by pulling from the course GitHub repository. We will also link HTML previews of each lecture notebook from the course homepage; you can use these to annotate the lecture notebooks with a tablet, if you’d like. Supplementary readings (which are different from pre-lecture readings) will primarily come from Learning Data Science, a textbook written by Sam Lau. It can be found at learningds.org. Some readings will come from notes.dsc80.com, a set of notes that were originally written to supplement DSC 80. Supplementary readings are not required, in that you won’t be tested on anything that appears only in the readings but not in lectures or assignments, but you should still complete them to supplement your understanding! . Discussions and Exam Prep . Discussions will be held online on Wednesdays 5:00-6:50PM. Discussion sections will be recorded. In past offerings of DSC 80, students often wished for more opportunities to practice the types of questions that will be asked on the midterm and final exams. To address this, we will be using discussions as exam prep. In the Welcome Survey at the start of the quarter, you will have the option of opting into discussion or opting out. If you choose to opt in, discussions will be worth 5% of your overall grade. If you choose to opt out, discussion will be worth 0%, and your midterm and final exam grade will each be worth 2.5% more. In each discussion, the tutors will prepare a worksheet of exam questions. You will receive credit for discussion for a particular week if you attend the discussion in person and complete the worksheet. Attending at least 8 discussions during the 10-week quarter will earn full credit for discussion. Labs . There will be 9 lab assignments due twice weekly throughout the quarter. Each lab assignment will consist of a mixture of coding and free response questions. Coding questions will ask you to fill in the body of a function. Public tests are usually provided so that you can make sure that you're on the right track (similar to DSC 20). However, your submission’s final score will use a private autograder with hidden tests. Each lab is worth the same amount, but the lowest lab will be dropped when calculating your final score. Labs from Tuesdays will usually be released on Wednesdays and due on Wednesdays at 11:59PM. Labs from Thursdays will usually be released on Fridays and due on Fridays at 11:59PM . You will access labs (and projects) by pulling the course GitHub repository. Projects . There will be 4 projects due throughout the quarter. Like labs, projects consist of coding and free response questions. As their name implies, however, projects are more open-ended and allow you to simulate applying your data science skills in practical situations. You can think of the projects as being mini-take-home-exams that track your practical skills throughout the quarter (whereas the exams themselves test for conceptual understanding). Projects are due weekly. The Final Project will be due the day of the final and can be thought of as a practical component of the Final Exam. Note that, unlike labs, the lowest project score is not dropped. Projects will usually be due on Wednesdays at 11:59PM. Working in Pairs . You may work together on projects (and projects only!) with a partner. If you work with a partner, you are both required to actively contribute to all parts of the project. You must both be working on the assignment at the same time together, either physically or virtually on a Zoom call. You are encouraged to follow the pair programming model, in which you work on just a single computer and alternate who writes the code and who thinks about the problems at a high level. In particular, you cannot split up the project and each work on separate parts independently. If you work with a partner: . | Only one partner needs to submit the project on Gradescope; this partner should add the other partner to their submission. | You and your partner will receive the same score on any submissions you make together. | . If you are unhappy with your partnership (e.g., if your partner does not keep in touch, does not come prepared to work on the assignment, or does not seem to be engaged in the process), please first address your concerns to your partner, and try to agree on what should be done to make the partnership work well for both of you. If that approach is not successful, explain the issues to the instructors, who will work with you and your partner to improve the situation. You may use different partners on different projects. Note that you may not work with partners on lab assignments, however you’re encouraged to discuss all assignments with others at a conceptual level in office hours and study groups. Office Hours . To get help on assignments and concepts, course staff will be hosting several office hours per week. All office hours will be held online. See the Calendar tab of the course website for the most up-to-date schedule and instructions. ",
    "url": "/syllabus/#course-components-",
    "relUrl": "/syllabus/#course-components-"
  },"18": {
    "doc": "📖 Syllabus",
    "title": "Exams 📝",
    "content": "This class has one Midterm Exam and one Final Exam. Exams are cumulative, though the Final Exam will emphasize material after the Midterm Exam. | Midterm Exam: Tuesday, July 20th, during the first half of lecture . | Final Exam: Saturday, September 7th, 7AM-10PM. Location is TBD. | . Both exams will be administered in-person. If you have conflicts with either of the exams, please let us know on the [Exam Accommodations Form][exam-accommodations]. Redemption Policy . The Final Exam will consist of two parts: a “Midterm” section and a “post-Midterm” section. If you do better on the “Midterm” section of the Final Exam than you did on the original Midterm Exam, your score on the “Midterm” section will replace your original Midterm Exam score. This lowers the stakes of the Midterm Exam and gives you two opportunities to demonstrate your understanding of the content from the first half of the course. You must take the Final Exam to pass the course. ",
    "url": "/syllabus/#exams-",
    "relUrl": "/syllabus/#exams-"
  },"19": {
    "doc": "📖 Syllabus",
    "title": "Policies 💯",
    "content": "Grading . Here is how we’ll compute your grade: . | Component | Weight | Notes | . | Labs | 20% | 2.5% per lab, lowest dropped | . | Projects | 25% | 5% each for Projects 1-3, 10% for Project 4 | . | Midterm Exam | 22.5% | see the Redemption Policy above | . | Final Exam | 32.5% |   | . | Lecture Attendance | 0% | If opted in, counts as 5% and reduces Midterm and Final Exam by 2.5% each. | . | Discussion | 0% | If opted in, counts as 5% and reduces Midterm and Final Exam by 2.5% each. | . Late Policy . All assignments must be submitted by 11:59PM San Diego time on the due date to be considered on time. You may turn them in as many times as you like before the deadline and only the most recent submission will count, so it’s a good habit to submit early and often. We recognize that life is unpredictable, and that there are circumstances and emergencies that cannot be resolved immediately. To account for this, you may request an extension for labs and projects by filling out the [Extension Request Form][extension-request-form]. Filling out this form will grant you a 1-day deadline extension for an assignment with no grade penalty. (We would like this process to be automatic, but for now it requires a staff member to manually update your due date on Gradescope.) We are using this policy to help identify and support students who may be encountering difficult circumstances, so if we notice that you have used the form many times during the quarter, course staff will schedule a meeting with you to come up with a plan for completing the rest of the course before approving further extension requests. If you submit an assignment late and didn’t fill out the Extension Request Form before the assignment deadline, the submission will not be accepted and you will receive a 0. Note that we will not grant deadline extensions for the Final Project deadline. Redemption Policy for Labs and Projects . Labs 1-9 and Projects 1-3 have a redemption policy to make up for lost points on your original submission. After the original deadline passes for an assignment, we will publish the autograder result for your latest submission before the assignment deadline. You may then submit the assignment as many times as you’d like before the final exam to redeem up to 80% of the points you lost on the original submission. Example: Suppose that after grades were released for the Project 1 deadline, Brendan receives a 90% since he lost points on a few hidden tests. He fixes the bugs, resubmits, and his new submission gets a 100%. His final grade for Project 1 would then be 98% (0.8 * (100% - 90%) + 90% = 98%). Note that this redemption policy does not apply to project checkpoints, or the Final Project. Regrade Requests . Most of the labs and projects are autograded, but some questions are manually graded. If you feel that there in an error in the autograder or that the manual grader has made a mistake, you may submit a regrade request within two days of the grades being released. If you do not submit a regrade request within two days, your original grade will be final. Regrade Requests for Manually Graded Problems . To submit a regrade request for a manually graded problem, make the regrade request directly on Gradescope. Note that part of your grade is clarity, so if your answer was mostly right but unclear you may still not be eligible for full credit. Regrade Requests for Autograded Problems . The autograder is very picky: it expects your assignments to have exactly the correct file names, all functions must be named correctly, etc. If these are wrong, your code may not run and the autograder may assign zero points. This is a grading catastrophe 😧. Grading catastrophes are preventable! After submitting your assignment, always wait around to see the output of the Gradescope grader and ensure that it runs properly. Also, be sure to submit your assignment (or at least part of it) to Gradescope with enough time before the deadline to get help if there is a strange autograder problem. Incompletes . In the unfortunate circumstance that you become sick, suffer a loss, or otherwise experience a significant setback that is outside of your control, you may be eligible for an Incomplete grade, which allows you to complete the rest of the work at a later time. If you are experiencing challenges due to circumstances outside your control, please contact me ASAP and we can discuss the best course of action. Note that an Incomplete does not allow you to re-do work that has already been completed, only to do work that hasn’t been completed, so it’s best to reach out right away. A note on letter grades . The following is adapted from CSE 160 at the University of Washington. Grading for this class is not curved in the sense that the average is set at (say) a B+ and half of the class must receive a grade lower than that. If everyone does well and shows mastery of the material, everyone can receive an A (this would be awesome!). If no one does well (this is unlikely), then everyone can receive a C. Grading for this class is curved in the sense that we do not have a pre-defined mapping from project and exam scores to a final GPA. There is no pre-determined score (e.g., 90% of all possible points) that earns an A or a B or a C or any other grade. To determine the final grade, we will ask questions like “Did this student master the material?”. With that said, grades will not be any stricter than the standard grading scale (where an A+ is a 97+, A is 93+, A- is 90+, etc). For instance, the threshold for an “A” will never be higher than 93%. Try your best not to worry about grades, and we’ll reciprocate by being fair. We’re in this together 😎. ",
    "url": "/syllabus/#policies-",
    "relUrl": "/syllabus/#policies-"
  },"20": {
    "doc": "📖 Syllabus",
    "title": "Collaboration Policy and Academic Integrity 🤝",
    "content": "DSC 80 is known for being a rigorous but rewarding course. While you will be challenged this quarter, we will be offering you plenty of support through office hours and Ed. Make good use of these resources, and you will be able to succeed in this course. There is no excuse for cheating in this course. If you do cheat, we will enforce the UCSD Policy on Integrity of Scholarship. This means you will likely fail the course and the Dean of your college will put you on probation or suspend or dismiss you from UCSD. Students agree that by taking this course, their assignments may be submitted to third-party software to help detect plagiarism. Why is academic integrity important? . Academic integrity is an issue that is pertinent to all students on campus. When students act unethically by copying someone’s work, taking an exam for someone else, plagiarizing, etc., these students are misrepresenting their academic abilities. This makes it impossible for instructors to give grades (and for the University to give degrees) that reflect student knowledge. This devalues the worth of a UCSD degree for all students, making it imperative for the the campus as a whole to enforce that all members of this community are honest and ethical. We want your degree to be meaningful and we want you to be proud to call yourself a graduate of UCSD! . The UCSD Policy on Integrity of Scholarship and this syllabus list some of the standards by which you are expected to complete your academic work, but your good ethical judgment (or asking us for advice) is also expected as we cannot list every behavior that is unethical or not in the spirit of academic integrity. Ignorance of the rules will not excuse you from any violations. What counts as cheating? . In DSC 80, you can read books, surf the web, talk to your friends and the DSC 80 staff to get help understanding the concepts you need to know to complete your assignments. However, all code must be written by you (or, in the instance of projects, together with your partner). The following activities are considered cheating and are not allowed in DSC 80 (not an exhaustive list): . | Using or submitting code acquired from other students (except from your pair programming partner during projects), the web, or any other resource not officially sanctioned by this course | Posting your code online, including on Ed, unless privately to instructors only | Having any other person complete any part of your assignment on your behalf | Completing an assignment on behalf of someone else | Providing code, exam questions, or solutions to any other student in the course | Splitting up project questions with your pair programming partner and each working on different questions | Collaborating with others on exams | . The following activities are examples of appropriate collaboration and are allowed in DSC 80 (not an exhaustive list): . | Discussing the general approach to solving labs or projects | Talking about problem-solving strategies or issues you ran into and how you solved them | Discussing the answers to exams with other students who have already taken the exam after the exam is complete | Using code provided in class, by the textbook or any other assigned reading or video, with attribution | Google searching for documentation on Python or pandas | Working together with other students on assignments without copying or sharing answers | Posting a question about your approach to a problem on Ed, without sharing your code | . The best way to avoid problems is by using your best judgement and remembering to act with Honesty, Trust, Fairness, Respect, Responsibility, and Courage. Here are some suggestions for completing your work: . | Don’t look at or discuss the details of another student’s code for an assignment you are working on, and don’t let another student look at your code. | Don’t start with someone else’s code and make changes to it, or in any way share code with other students. | If you are talking to another student about an assignment, don’t take notes, and wait an hour afterward before you write any code. | . Use of Generative Artificial Intelligence . Generative Artificial Intelligence (GenAI) describes tools, such as ChatGPT and GitHub Copilot, that are trained to generate responses to user-defined prompts, or questions. The existence of such tools is a major milestone in machine learning, and an impressive application of data science in the real world. Our course policy on the use of GenAI tools for coursework is simple: you may use these tools to build an understanding of course material and to assist you on assignments, keeping in mind that no tool is a substitute for a strong understanding of course concepts. Be mindful of how you are using GenAI tools. These tools can be very useful to help you preview material before lecture, summarize material after lecture, explain concepts you didn’t understand, and explore how different concepts are related. “Explain it like I’m five” can be a helpful prompt to give you a basic understanding of new concepts before being exposed to them in lecture. Consolidating your knowledge after learning something new and relating it to other things you know is important for learning and retention. Unfortunately, GenAI tools are not a consistently reliable source of quality information. Because of how GenAI tools are trained, they often provide answers and write code that look correct, but aren’t actually correct. A goal of your education is to develop an ability to identify and produce information that actually is correct and doesn’t just sound correct. Human supervision of GenAI tools is always necessary. Proceed with caution when using tools to assist you with your assignments. DSC 80 is a foundational class for your study of data science; you need to master the skills and concepts of this course if you want to use data science effectively. Through exams, you will be tested on your independent ability to apply course material to novel problems. Labs and projects are meant to prepare you for these assessments, so overreliance on GenAI for assignments will rob you of opportunities to learn and make it hard for you to perform well on exams. If you do use GenAI to assist you on assignments, keep these guidelines in mind: . | Design your prompts carefully. Don’t just ask one question; ask a follow-up question based on the output to the first. To use these tools effectively, you need to engineer your prompts carefully. | Test the outputs. GenAI tools can and do make mistakes, and being able to verify the correctness of a proposed answer is an important skill for you to develop. Validate the output against course-provided references, or follow up with a search on Google or Stack Overflow. Remember that GenAI tools provide crowdsourced likely answers, not necessarily correct answers. | Don’t submit any code that you don’t understand, or that uses content not taught in this class. In our experience last quarter, students who used ChatGPT to help with assignments ended up with code that was difficult for both them and the teaching staff to understand. If you answer questions with out-of-scope content, you are not practicing the foundational skills that the course is meant to teach you. Be careful! | . If your assignment submission includes any content generated by an AI tool, it should be cited to acknowledge the source of the material. In each assignment, you will be provided with a space to explain and reflect on your use of GenAI tool(s). ",
    "url": "/syllabus/#collaboration-policy-and-academic-integrity-",
    "relUrl": "/syllabus/#collaboration-policy-and-academic-integrity-"
  },"21": {
    "doc": "📖 Syllabus",
    "title": "Support 🫂",
    "content": "Accommodations . From the Office for Students with Disabilities (OSD): . OSD works with students with documented disabilities to review documentation and determine reasonable accommodations. Disabilities can occur in these areas: psychological, psychiatric, learning, attention, chronic health, physical, vision, hearing, and acquired brain injuries, and may occur at any time during a student’s college career. We encourage you to contact the OSD as soon as you become aware of a condition that is disabling so that we can work with you. If you already have accommodations via OSD, please make sure that we receive your Authorization for Accommodation (AFA) letter by the end of Week 1 so that we can make arrangements for accommodations. Share your AFA letter with the instructor and the Data Science OSD Liaison, who can be reached at dscstudent@ucsd.edu. Diversity and Inclusion . We are committed to an inclusive learning environment that respects our diversity of perspectives, experiences, and identities. Our goal is to create a diverse and inclusive learning environment where all students feel comfortable and can thrive. If you have any suggestions as to how we could create a more inclusive setting, please let us know. We also expect that you, as a student in this course, will honor and respect your classmates, abiding by the UCSD Principles of Community. Please understand that others’ backgrounds, perspectives and experiences may be different than your own, and help us to build an environment where everyone is respected and feels comfortable. Campus Resources . If there is an issue you feel uncomfortable speaking with us or are searching for help on a specific concern, there are several campus resources available to you, including: . | UCSD Counseling and Psychological Services (CAPS) | Hub Basic Needs Center | Office for Students with Disability (OSD) | Office for Prevention of Sexual Harrassment and Discrimination | . ",
    "url": "/syllabus/#support-",
    "relUrl": "/syllabus/#support-"
  },"22": {
    "doc": "📖 Syllabus",
    "title": "Acknowledgements 🙏",
    "content": "This offering of DSC 80 builds off of prior offerings by Sam Lau, Tauhidur Rahman, Suraj Rampure, Justin Eldridge, Marina Langlois, and Aaron Fraenkel. Along with the help of their tutors and TAs, they developed much of the content that we will use in this course. ",
    "url": "/syllabus/#acknowledgements-",
    "relUrl": "/syllabus/#acknowledgements-"
  },"23": {
    "doc": "🙋‍♂️ Tech Support",
    "title": "🙋‍♂️ Tech Support",
    "content": " ",
    "url": "/tech_support/",
    "relUrl": "/tech_support/"
  },"24": {
    "doc": "🙋‍♂️ Tech Support",
    "title": "Table of contents",
    "content": ". | Introduction | Environments and Package Managers | Replicating the Gradescope Environment . | Step 1: Install mamba | Step 2: Download environment.yml | Step 3: Create a new conda environment | Step 4: Activate the environment | . | Working on Assignments . | Activating the conda environment | Using Git | Choosing a Text Editor or IDE | Using VSCode to Run Jupyter Notebooks | . | . ",
    "url": "/tech_support/#table-of-contents",
    "relUrl": "/tech_support/#table-of-contents"
  },"25": {
    "doc": "🙋‍♂️ Tech Support",
    "title": "Introduction",
    "content": "In DSC 10, you worked on assignments on DataHub, a computing platform that already had all of the Python packages you needed installed. But in the real world, you’ll be expected to set up and maintain a Python environment locally – that is, on your own computer – and so that’s what we’ll have you do here. That’s right – no DataHub! You already have experience writing and running code locally from DSC 20 and DSC 30; setting up your environment for DSC 80 will be slightly more involved than it was there, but most of these steps only need to be done once. There has been a lot written about how to set up a Python environment, so we won’t reinvent the wheel. This page will only be a summary; Google will be your main resource. But always feel free to come to a staff member’s office hours if you have a question about setting up your environment, using Git, or similar — we’re here to help. This video walks through most of the steps here, but it’s not a substitute for reading this page carefully. ",
    "url": "/tech_support/#introduction",
    "relUrl": "/tech_support/#introduction"
  },"26": {
    "doc": "🙋‍♂️ Tech Support",
    "title": "Environments and Package Managers",
    "content": "For this class, the software you’ll need includes Python 3.8, a few specific Python packages, Git, and a text editor. Gradescope has an environment which it uses to autograde your work. You can think of an environment as a combination of a Python version and specific versions of Python packages that is isolated from the rest of your computer. In practice, developers create different environments for different projects, so that they can use different versions of packages in different projects. We’re going to have you replicate the environment Gradescope has on your computer. The reason for this is so that your code behaves the same when you submit it to Gradescope as it does when you work on it on your computer. For example, our Gradescope environment uses numpy version 1.21.2; if you install a different version of numpy on your computer, for example, you might see different results than Gradescope sees. How do you install packages, then? pip is a common choice, but even though it’s widely used, it lacks built-in support for creating isolated environments. This limitation makes it challenging to maintain version consistency and avoid conflicts between packages. Consequently, we do not recommend relying solely on pip install for environment management, as it may inadvertently introduce incompatible package versions. conda, on the other hand, is a powerful tool that not only installs packages but also manages environments effortlessly. It allows you to create isolated environments and ensures compatibility among the packages within those environments. The tool we’re going to use, though, is mamba, which is a wrapper around conda that is designed to be much faster. If you should need to install a new Python package, you can use the mamba command (once you have mamba installed). Inside the Terminal, type mamba install &lt;package_name&gt;, where &lt;package_name&gt; is replaced by the name of the package you want to install, and hit enter. However, you should only run mamba install once you’ve entered your dsc80 environment – more on this below. ",
    "url": "/tech_support/#environments-and-package-managers",
    "relUrl": "/tech_support/#environments-and-package-managers"
  },"27": {
    "doc": "🙋‍♂️ Tech Support",
    "title": "Replicating the Gradescope Environment",
    "content": "Below, we’re going to walk you through how to create the same environment that Gradescope uses. Step 1: Install mamba . The way to do this depends on whether you’re on a Unix-like platform (macOS or Linux) or on Windows. Unix-like platforms (macOS or Linux): . | Download the mamba installer. To do this, open your Terminal and run: . curl -L -O \"https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-$(uname)-$(uname -m).sh\" . This will place a file named something like Miniforge3-Darwin-arm64.sh wherever you ran the command. If you get an error saying command not found: curl, replace curl -L -O with wget and re-run the same command. | Run the installer. To do this, immediately after the last command, run: . bash Miniforge3-$(uname)-$(uname -m).sh . | . Windows: . | Download the Windows install script from here under “Miniforge3.” The file should be named Miniforge3-Windows-x86_64.exe or similar. | Run the downloaded .exe file. Follow the prompts, taking note of the options to “Create start menu shortcuts” and “Add Miniforge3 to my PATH environment variable”. The latter is not selected by default due to potential conflicts with other software. Without Miniforge3 on the path, the most convenient way to use the installed software (such as commands mamba) will be via the “Miniforge Prompt” installed to the start menu. | Run the following command in your Anaconda Prompt: start /wait \"\" Miniforge3-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\\Miniforge3 . | . Make sure to run this command in the same folder that Miniforge3-Windows-x64_64.exe is! If that’s not the folder that your command line interface is looking in, you’ll need to cd there first, e.g. cd C:\\Users\\surajrampure\\Desktop if that file is on your Desktop. Step 2: Download environment.yml . This file contains the necessary details to configure your environment. If you take a look at it, you’ll see that it contains a specific Python version (python=3.8) along with specific package versions (like pandas==1.3.3 and requests==2.31.0, for example). Step 3: Create a new conda environment . Yes, we said conda environment, even though we’re using mamba to create it. To create the environment, in your Terminal or Anaconda Prompt, run: . mamba env create -f environment.yml . Note that if you put environment.yml in your Downloads or Desktop folder, you should replace environment.yml with the path to the file, for example: mamba env create -f /Users/yourusername/Desktop/environment.yml. Otherwise, you might get an error saying environment.yml does not exist. Step 4: Activate the environment . To do so, run: . mamba activate dsc80 . Where did the name dsc80 come from, you might ask? We defined it for you at the top of environment.yml with name: dsc80. If you get an error saying mamba isn’t defined, try closing and reopening your Terminal first and then rerunning the command. ",
    "url": "/tech_support/#replicating-the-gradescope-environment",
    "relUrl": "/tech_support/#replicating-the-gradescope-environment"
  },"28": {
    "doc": "🙋‍♂️ Tech Support",
    "title": "Working on Assignments",
    "content": "Activating the conda environment . The setup instructions above only need to be run once. Now, every time you work on DSC 80 assignments, all you need to do is run . mamba activate dsc80 . in your Terminal or Anaconda Prompt. If you need to install any packages into your dsc80 environment using mamba install, make sure to activate the environment first. If you’re using VSCode, you should select the Python kernel corresponding to the dsc80 environment to use it. To open a Jupyter Notebook, use the jupyter notebook command in your Terminal or Anaconda Prompt. Using Git . All of our course materials, including your assignments, are hosted on GitHub in this Git repository. This means that you’ll need to download and use Git in order to work with the course materials. Git is a version control system. In short, it is used to keep track of the history of a project. With Git, you can go back in time to any previous version of your project, or even work on two different versions (or \"branches\") in parallel and \"merge\" them together at some point in the future. We'll stick to using the basic features of Git in DSC 80. There are Git GUIs, and you can use them for this class. You can also use the command-line version of Git. To get started, you'll need to \"clone\" the course repository. The command to do this is: . git clone https://github.com/dsc-courses/dsc80-2024-ss2 . This will copy the repository to a directory on your computer. You should only need to do this once. Moving forward, to bring in the latest version of the repository, in your local repository, run: . git pull . This will not overwrite your work. In fact, Git is designed to make it very difficult to lose work (although it's still possible!). Merge Conflicts . You might face issues when using git pull regarding merge issues and branches. This is caused by files being updated on your side while we are also changing the Git repository by pushing new assignments on our side. Here are some steps you can follow to resolve them: . NOTE: Whenever working with GitHub pulls, merges, etc., it’s a good idea to save your important work locally so that if you accidentally overwrite your files you still have the work saved. Save your work locally before following the steps below. | git status shows the current state of your Git working directory and staging area. It’s a good sanity check to start with. You will probably see your project and lab files that you have worked on. | git add . will add all your files to be ready to commit. | git commit -m \"some message of your choice\" will commit the files, with some description in the quotations. This can be whatever you want, it won’t matter. | . At this stage, if you git pull, it should work. You should double-check that you have new files, as well as that your old files are unchanged. If they are changed then you should be able to just copy-paste from your local backup. If this does not work then you may have merge conflicts, follow the next steps: . | git checkout --theirs [FILENAME] will tell git that whenever a conflict occurs in [FILENAME] to keep your version. Run this for each file with a conflict. | git add [FILENAME] to mark each file with a conflict as resolved. | git rebase --continue or git merge, depending on the setup. | . Choosing a Text Editor or IDE . In this class, you will need to use a combination of editors for doing your assignments: The Python files should be developed with a text editor (for syntax highlighting and running doctests) and the data/results should be analyzed/presented in Jupyter Notebooks. Below is an incomplete list of IDEs you might want to try. For more information about them, feel free to ask the course staff. If you’re curious, Suraj uses VSCode to edit .py files and the vanilla Jupyter environment to edit notebooks. | The JupyterLab text editor: see below. Can be used to edit both notebooks and .py files. | VSCode: Microsoft Visual Studio Code. Currently very popular, and can also be used to edit both notebooks and .py files. | sublime: A favorite text editor of hackers, famous for its multiple cursors. A good, general-purpose choice. | atom: GitHub’s editor. Pretty nice fully featured IDE. Can only work locally. | PyCharm (IntelliJ): Those who feel at home coding Java. Can only work locally. | nano: available on most unix commandlines (e.g. DataHub Terminal). If you use this for more than changing a word or two, you'll hate your life. | (neo)vim: lightweight, productive text-editor that might be the most efficient way to edit text, if you can ever learn how to use it. Justin Eldridge’s text editor of choice. | emacs: A text editor for those who prefer a life of endless toil. Endlessly customizable, it promises everything, but you’re never good enough to deliver. | . Using VSCode to Run Jupyter Notebooks . Many students like to use VSCode to edit Jupyter Notebooks. If that’s you, then you’ll need to make sure to activate your dsc80 conda environment within your notebook in VSCode. Here’s how to do that. | Open a Juypter Notebook in VSCode. | Click “Select Kernel” in the top right corner of the window. | Click “Python Environments” in the toolbar that appears in the middle. | Finally, click “dsc80 (Python 3.8.18)”. | . ",
    "url": "/tech_support/#working-on-assignments",
    "relUrl": "/tech_support/#working-on-assignments"
  }
}
