
# Do NOT edit this file. Instead, just call it from the command line,
# using the instructions in the assignment notebook.

import sys
questions = sys.argv[1:]


valid_ids = ['q0', 'q1', 'q2', 'q3', 'q4', 'q5', 'q6', 'q6.2', 'q7', 'q8', 'q9']
break_flag = False
invalid_ids = []
for question in questions:
    if question != 'all' and question not in valid_ids:
        invalid_ids.append(question)

if len(invalid_ids) > 0:
    print(str(invalid_ids) + ' is/are not a valid question number(s). The possible question numbers are ' + str(valid_ids) + '.')
    sys.exit()

# Initialize Otter
import otter
grader = otter.Notebook("lab.ipynb")

# %load_ext autoreload
# %autoreload 2

from lab import *

from pathlib import Path
import io
import pandas as pd
import numpy as np

from IPython.display import IFrame
IFrame(src="https://www.loom.com/embed/0ea254b85b2745e59322b5e5a8692e91", width=750, height=500)

# The cells below are here for you to write scratch work in. 
# You should write the code for your answer in `lab.py`, not here.

if 'q0' in questions or questions == [] or 'all' in questions:
    print(grader.check("q0"))

if 'q1' in questions or questions == [] or 'all' in questions:
    print(grader.check("q1"))

if 'q2' in questions or questions == [] or 'all' in questions:
    print(grader.check("q2"))

if 'q3' in questions or questions == [] or 'all' in questions:
    print(grader.check("q3"))

# You'll see the Path(...) / syntax a lot.
# It creates the correct path to your file, 
# whether you're using Windows, macOS, or Linux.
# (Note that macOS and Linux use / to denote separate folders in paths,
# while Windows uses \.)

fp = Path('data') / 'chars.txt'
last_chars(open(fp))

if 'q4' in questions or questions == [] or 'all' in questions:
    print(grader.check("q4"))

# Don't change this cell -- it is needed for the tests to work
A_1 = np.array([2, 4, 6, 7])
out_1 = add_root(A_1)

A_2 = np.array([1, 2, 16, 17, 32, 49])
out_2 = where_square(A_2)

if 'q5' in questions or questions == [] or 'all' in questions:
    print(grader.check("q5"))

if 'q6' in questions or questions == [] or 'all' in questions:
    print(grader.check("q6"))

if 'q6.2' in questions or questions == [] or 'all' in questions:
    print(grader.check("q6.2"))

# Don't change this cell -- it is needed for the tests to work
fp = Path('data') / 'stocks.csv'
stocks = np.array([float(x) for x in open(fp)])
out_3_stocks = growth_rates(stocks)

A_4 = np.array([3, 3, 3, 3])
out_4 = with_leftover(A_4)

if 'q7' in questions or questions == [] or 'all' in questions:
    print(grader.check("q7"))

# Do not edit this cell -- it is needed for the tests
salary_fp = Path('data') / 'salary.csv'
salary = pd.read_csv(salary_fp)
salary.head()

# Do not edit this cell -- it is needed for the tests
salary_fp = Path('data') / 'salary.csv'
salary = pd.read_csv(salary_fp)
stats = salary_stats(salary)

salary_sample_fp = Path('data') / 'salary_sample.csv'
salary_sample = pd.read_csv(salary_sample_fp)
sample_stats = salary_stats(salary_sample)

if 'q8' in questions or questions == [] or 'all' in questions:
    print(grader.check("q8"))

# Do not edit -- needed for tests
fp = Path('data') / 'malformed.csv'
cols = ['first', 'last', 'weight', 'height', 'geo']
df = parse_malformed(fp)
dg = pd.read_csv(fp, nrows=4, skiprows=10, names=cols)

if 'q9' in questions or questions == [] or 'all' in questions:
    print(grader.check("q9"))


